To create react mvc express react project 
This tutorial follwed by youtube. link given below:--> 
Channel name :: PedroTech
1. https://www.youtube.com/watch?v=Hl7diL7SFw8&list=PLpPqplz6dKxUaZ630TY1BFIo5nP-_x-nL&index=10
We had to create two folder client and server folder.
1. In server folder.
    1.1. first command in terminal :: npm init.
    1.2. second command in terminal :: npm install express cors mysql2 --save
         1.2.1. mysql2 npm web link---> https://www.npmjs.com/package/mysql2
         1.2.2. express npm web link---> https://www.npmjs.com/package/express
         1.2.3. cors npm web link---> https://www.npmjs.com/package/cors
    1.3. create a file name index.js (Note:: you could name the file any name you want.
         if name the file "test.js" then you should change name in package.json->>
         before Change:: {"name": "index.js"} after Change::{"name" : "test.js"})
    1.4. In index.js folder -->>>
        1.4.1.
            const express = require('express')
            const app = express();
            
            app.listen(3080, ()=> {
                console.log("Server running on port 3080") // server running on port 3080 successfully
            })
        1.4.2. run command in terminal:: node index.js (Note:: if the file test.js then command will be:: node test.js)
    1.5. run command in terminal :: npm install nodemon --save 
         1.5.1 nodemon npm web link--> https://www.npmjs.com/package/nodemon
    1.6. In package.json-->>>
            in script: {
                "start" "nodemon index.js"
            }
    1.7. run command in terminal :: npm start

--->>>>>>>Create Database in mysql server

    1.8. run command in terminal :: npm install sequelize sequelize-cli --save
         1.8.1. npm sequelize web link::--> https://www.npmjs.com/package/sequelize
         1.8.2. npm sequelize-cli web link::--> https://www.npmjs.com/package/sequelize-cli

    1.9. run command in terminal :: sequelize init
         (Note:: if you get error like this.
                    sequelize : The term 'sequelize' is not recognized as the name of a      
                        cmdlet, function, script file, or operable program. Check the spelling   
                        of the name, or if a path was included, verify that the path is correct  
                        and try again.
            
            To solve this problem -->
                run command in terminal ::-> npm install -g sequelize-cli
            
            try again :: sequelize init
            if again error like this :: -> File C:Users\Users\user\AppData\Roaming\npm\sequelize.ps1   
                                            cannot be loaded because running scripts is disabled on this system.
            To solve this problem -->
                if you use vscode then try to run in vscode terminal->
                    command :: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser
            And also add in -->
                if Operating System windows then ->
                    search in windows search bar -> Edit the system environment variables 
                        open -> System properties
                        In System properties->
                            click -> Environment variables
                                In Environment variables->
                                    select path and click edit 
                                    then add the path of npm -> C:\Users\user\AppData\Roaming\npm
         )-->// end Note
    1.10. after successfully command = (sequelize init) execute 
            if we see in directory there's create some some folder like (migrations, seeders, config)

    1.11. Delete migrations and seeders folder.
    1.12. in models folder :
                create posts.js (or any name you want)
    1.13. In models/posts.js :
            To generate posts table:
                
                module.exports = (sequelize, DataTypes) => {
                    const Posts = sequelize.define("Posts", { // we are gonna define table as posts
                        title: {
                            type: DataTypes.STRING,
                            allowNull: false,
                        },
                        postText: {
                            type: DataTypes.STRING,
                            allowNull: false,
                        },
                        username: {
                            type: DataTypes.STRING,
                            allowNull: false,
                        }
                    })

                    return Posts //we return all the object of Posts
                }
    1.14. To create table in database automatically,
          1.14.1. In index.js file,
                    const db = require('./models')

                    db.sequelize.sync().then(() => {
                        app.listen(3080, ()=> {
                            console.log('Server running on port 3080')
                        })
                    })
    1.15. In config/config.json,
                "development": {
                "username": "root",
                "password": null, // you can also give "" string if password don't have in server
                "database": "tutorialdb", // name the database like in server
                "host": "127.0.0.1", // give host address
                "dialect": "mysql"
            },

    1.16. run command in terminal: npm start 
    1.17. check server database table create or not
    1.18. create folder in server name ::>>>> routes
    1.19. In routes folder:
            1.19.1. create Posts.js file.
                        const express = require('express')
                        const router = express.Router()

                        router.get('/', (req, res) =>{
                            res.send('hello world')
                        })

                        module.exports = router ;
    1.20. In server/index.js file:
            app.use(express.json())
            //Routers
            const postRouter = require('./routes/Posts')
            app.use("/posts", postRouter)
    1.21. In routes/Posts.js file: 
            router.post('/', async (req, res) => {
                const post = req.body
                await Posts.create(post)
                res.json(post)
            })
    1.22. then Use Postman to check if data insert to database or not.
    1.23. In route/Posts.js file:
            router.get('/', async (req, res) => {
                const listOfPosts = await Posts.findAll()
                res.json(listOfPosts)
            })
    
Now In Client folder we want you to show that. how React connect with node
2.In client folder
    2.1. open terminal and give command : npx create-react-app .  
         (Note:: "." or dot symbol is use to initial directory )
    2.2. to run type command In terminal: npm start
    2.3. In src folder:
            delete those files (App.test.js, index.css, logo.svg, setupTests.js)
    2.4. In src/App.js file:
            import './App.css';

            function App() {
            return (
                <div className="App">

                </div>
            );
            }

            export default App;

    2.5. to make an api request type command in terminal: npm install axios
1. Back to server folder
    1.24. In index.js file.
            const cors = require('cors')

            app.use(cors())
2. Back to client folder 
    2.6. create service folder.
    2.7. in service folder:
            2.7.1. create PostServices folder.
    2.8. in service/PostServices folder:
            type the code below.
                import axios from "axios"

                const PostServices = {}

                PostServices.list = async () => {
                    let url = "http://127.0.0.1:3080/posts"
                    const res = await axios
                        .get(url)
                        .then(response => {
                            return response.data
                        })
                        .catch(error => {
                            return error
                        })
                    return res;
                }

                export default PostServices;
    2.9. Create views folder.
    2.10. In App.js file:
            
                import React, { useEffect, useState } from 'react'
                import PostServices from '../services/PostServices';

                export const App = () => {
                const [listOfPosts, setListOfPosts] = useState([])

                const getPost = async () => {
                    const data = await PostServices.list()
                    setListOfPosts(data)
                }

                useEffect(() => {
                    getPost()
                }, [])

                console.log(`state.listOfPosts`, listOfPosts)
                return (
                    <div className="container">
                    <table className="table table-striped|sm|bordered|hover|inverse table-inverse table-responsive">
                        <thead className="thead-inverse|thead-default">
                        <tr>
                            <th>Name</th>
                            <th>Title</th>
                            <th>Text</th>
                        </tr>
                        </thead>
                        <tbody>
                        { listOfPosts.map(post => (
                            <tr key={ post.id }>
                            <td scope="row">{ post.username }</td>
                            <td>{ post.title }</td>
                            <td>{ post.postText }</td>
                            </tr>
                        )) }

                        </tbody>
                    </table>

                    </div>
                )
                }


                export default App;
    2.12. run command in terminal: npm install react-router-dom
    2.13. in App.js file:
            import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'
            import { Home } from './Pages/Home'
            import PostForm from './Pages/PostForm'

            return (
                <div className="App">
                <Router>
                    <Link to="/post-form">Create A post</Link>
                    <Link to="/">Home page</Link>
                    <Switch>
                    <Route path="/" exact component={ Home } />
                    <Route path="/post-form" exact component={ PostForm } />
                    </Switch>
                </Router>
                </div>
            )
    2.14. In pages/PostForm.js file:
            import { Formik, Form, Field, ErrorMessage } from 'formik'

            export const PostForm = () => {

                const initialValues = {
                    title: "",
                    postText: "",
                    username: ""
                }

                const onSubmit = (data) => {
                    console.log(data)
                }

                return (
                    <div className="mt-3 container col-6 p-3 border border-primary rounded">
                        <div className="createPostPage">
                            <h4>Create Post</h4>
                            <Formik initialValues={ initialValues } onSubmit={ onSubmit }>
                                <Form>
                                    <div className="mb-3">
                                        <label htmlFor="inputTitle" className="form-label">Title</label>
                                        <Field id="inputTitle" className="form-control" name="title" placeholder="(Expample.Title....)" />
                                    </div>
                                    <div className="mb-3">
                                        <label htmlFor="postTag" className="form-label">Post:</label>
                                        <Field id="postTag" className="form-control" name="postText" placeholder="(Expample.Post....)" />
                                    </div>
                                    <div className="mb-3">
                                        <label htmlFor="username" className="form-label">User Name:</label>
                                        <Field id="username" className="form-control" name="username" placeholder="(Expample.username....)" />
                                    </div>
                                    <button type="submit" className="btn btn-primary">Submit</button>
                                </Form>
                            </Formik>
                        </div>
                    </div>
                )
            }
    2.15. give command in terminal : npm i -s yup
            link documentation-> https://www.npmjs.com/package/yup

    2.16. in pages/PostForm file:
            import * as Yup from 'yup'
            export const PostForm = () => {
                const validationSchema = Yup.object().shape({
                    title: Yup.string().required(),
                    postText: Yup.string().required(),
                    username: Yup.string().min(3).max(15).required()
                })}
    2.17. In pages/PostForm file :
            const onSubmit = async (data) => {
                const savePost = await PostServices.post(data)
                console.log(`savePost`, savePost)
            }
    2.18. In PostServices file :
    
            PostServices.post = async (data) => {
                let url = "http://127.0.0.1:3080/posts"
                const res = await axios
                    .post(url, data)
                    .then(response => {
                        return response
                    })
                    .catch(error => {
                        return error
                    })
            }

Back to server folder
    1.25. Create comments.js file in models folder.
    1.26. in models/comments file :=>
                module.exports = (sequelize, DataTypes) => {
                const Comments = sequelize.define("Comments", { // we are gonna define table as posts
                    commentBody: {
                        type: DataTypes.STRING,
                        allowNull: false,
                    }
                })

                return Comments //we return all the object of Posts
            }
    1.27. in models/Posts.js file : =>
            Posts.associate = (models) => {
                Posts.hasMany(models.Comments, {
                    onDelete: "cascade"
                })
            }
            (Note: this is for if user create post and there's have multiple comments.
                    and if the user want delete the posts. comments also will be deleted.
                    along with posts. suppose if post id =1 and in comment table in comment 
                    id's 2,5,6 are comments.postId =1 then those comment will be deleted. if user
                    want to delete.)

    1.28. create file Comments.js in routes folder:
    1.29. in routes/Comments.js::> 
                const express = require('express')
                const router = express.Router()
                const { Comments } = require('../models')


                router.get("/:postId", async (req, res) => {
                    const postId = req.params.postId
                    const comments = await Comments.findAll({ where: { PostId: postId } })
                    res.json(comments)
                })
                module.exports = router;
    1.30. in index.js file::>
            
            //Routers
            const commentsRouter = require('./routes/Comments')
            app.use("/comments", commentsRouter)

    1.31. In routes/Posts.js file ::>
                
            router.get('/byId/:id', async (req, res) => {
                const id = req.params.id
                const post = await Posts.findByPk(id) //findByPk means find by primary key
                res.json(post)
            })
    1.32. Check in mysql if post specific working or not
    1.33. In routes/Comments file ::>
                
            router.post('/', async (req, res) => {
                const comment = req.body
                await Comments.create(comment)
                res.json(comment)
            })
    1.34. to save comments data to database : in json like ::>
            {
                "commentBody": "joker on me..",
                "PostId": 4
            }

Back to Client:
    2.19. Create Post.js in src/pages folder.
            import React from 'react'
            import { useParams } from 'react-router'
            export const Post = () => {
                let { id } = useParams()

                return (
                    <div>
                        <h1>Hello  world:: { id }</h1>
                    </div>
                )
            }

            export default Post
    2.20. in App.js file:
            <Route path="/post/:id" exact component={ Post } />
    2.21. in Home.js file:
            import { useHistory } from 'react-router';
            let history = useHistory()
            <div className="card text-center col-2 col-md-3 m-2" key={ post.id } onClick={ () => { history.push(`/post/${post.id}`) } }>
    
install sass ::> npm install --save-dev node-sass

Next step create Users for registration and login and other process

at first in server folder
    1.35. create file in models/Users.js :

            // const { DataTypes } = require("sequelize/types");
            // const { sequelize } = require(".");

            module.exports = (sequelize, DataTypes) => {
                const Users = sequelize.define("Users", { // we are gonna define table as posts
                    username: {
                        type: DataTypes.STRING,
                        allowNull: false,
                    },
                    password: {
                        type: DataTypes.STRING,
                        allowNull: false,
                    }
                })

                Users.associate = (models) => {
                    Users.hasMany(models.Posts, {
                        onDelete: "cascade"
                    })
                }

                return Users //we return all the object of Posts
            }

    1.36. In routes/Users.js file: 
            const express = require('express')
            const router = express.Router()
            const { Users } = require('../models')

            router.post('/', async (req, res) => { })



            module.exports = router;
    1.37. in index.js file:
    
            //Routers for users
            const usersRouter = require('./routes/Users')
            app.use("/auth", usersRouter)
    1.38. run command in terminal : npm install bcrypt

    1.39. To create users : 
            in routes/Users.js file:
                const bcrypt = require("bcrypt")
            
                router.post('/', async (req, res) => {
                    const { username, password } = req.body
                    bcrypt.hash(password, 10).then((hash) => { 
                        Users.create({
                            username: username,
                            password: hash,
                        })
                        res.json("SUCCESS")

                    })
                })

    1.39. in routes/Users.js file: 
    
            router.post("/login", async (req, res) => {
                const { username, password } = req.body
                const user = await Users.findOne({ where: { username: username } })
                if (!user) res.json({ error: "User Doesn't Exist" })
                bcrypt.compare(password, user.password).then((match) => {
                    if (!match) res.json({ error: "Wrong Username And Password Combination" })
                    res.json("You Logged In!!!")
                })
            })
::>>> npm install --save react-toastify // notification toastify // in client folder
toastify documentation::>>>https://fkhadra.github.io/react-toastify/introduction
link documentation: https://fkhadra.github.io/react-toastify/installation
::>>> npm install jsonwebtoken in server folder
link documentation: https://www.npmjs.com/package/jsonwebtoken

to update npm version ::>
run cmd : npm install -g npm

In server folder:
    1.40. In routes/Users.js file:
            const { sign } = require("jsonwebtoken")
            // add those line on route login

            router.post("/login", async (req, res) => {
                const { username, password } = req.body
                const user = await Users.findOne({ where: { username: username } })
                if (!user) res.json({ error: "User Doesn't Exist" })
                bcrypt.compare(password, user.password).then((match) => {
                    if (!match) res.json({ error: "Wrong Username And Password Combination" })
                    const accessToken = sign({ username: user.username, id: user.id }, "importantsecret")
                    res.json(accessToken)
                })
            })
In client folder:
        2.22. In userService file:

                UserServices.login = async (data) => {
                    let url = "http://127.0.0.1:3080/auth/login"
                    console.log(`data`, data)
                    const res = await axios
                        .post(url, data)
                        .then(response => {
                            console.log(`response userservice: `, response)
                            if (response.data.error) {
                                toast.error(response.data.error, {
                                    theme: "colored"
                                })
                            } else {
                                toast.success("YOU LOGGED IN !!!", {
                                    theme: "colored"
                                })
                                console.log(`response.data`, response.data)
                                localStorage.setItem("accessToken", response.data)
                            }
                            return response.data
                        })
                        .catch(error => {
                            console.log(`error userservices`, error)
                            return error
                        })
                    return res
                }

// Back to server folder.
create middlewares folder in server folder
    1.42. in middlewares folder create AuthMiddleware.
    1.43. In middlewares/AuthMiddleware.js file: 
            const { verify } = require("jsonwebtoken")

            const validateToken = (req, res, next) => {

                const accessToken = req.header("accessToken")
                if (!accessToken) return res.json({ error: "User not Logged in!" })
                try {
                    const validToken = verify(accessToken, "importantfulusecret")
                    if (validToken) {
                        return next()
                    }
                } catch (errorMsg) {
                    return res.json({ error: errorMsg })
                }
            }

            module.exports = { validateToken }
    1.44. in routes/Comments.s file: 
            const { validateToken } = require('../middlewares/AuthMiddleware')

            router.post('/', validateToken, async (req, res) => {
                const comment = req.body
                await Comments.create(comment)
                res.json(comment)
            })
In Client folder:
    2.23. In CommentService.js file:
            CommentServices.store = async (data) => {
                let url = "http://127.0.0.1:3080/comments/"
                const res = await axios
                    .post(url, data, { 
                        headers: { //for middleware auth add thise line
                            accessToken: localStorage.getItem("accessToken") //for middleware auth add thise line
                        } //for middleware auth add thise line
                    })
                    .then(response => {
                        if (response.data.error) {
                            console.log(`response data error`, response)
                            toast.error('You are not Logged In!', {
                                theme: "colored"
                            })
                        } else {
                            console.log(`response success`, response)
                            toast.success("Your Comment saved !!!", {
                                theme: "colored"
                            })
                        }

                        return response.data
                    })
                    .catch(error => {
                        return error
                    })
                return res
            }
    2.24. Create helpers folder in src folder:
    2.25. In helpers folder create AuthContext.js file:
    2.26. In src/helpers/AuthContext.js file:
            import { createContext } from "react";

            export const AuthContext = createContext("")

    2.27. In App.js file:
            import React, { useContext, useState } from "react"
            import AuthContext from  "../helpers/AuthContext"
            function App() {
                const {authState, setAuthState} = useState({
                    id: 0,
                    username: "",
                    status: false
                })
            }

            const logout = () => {
                localStorage.removeItem('authToken')
                setAuthState({
                    id: 0,
                    username: "",
                    status: false
                })
            }

            return (
                <AuthContext.Provider value = {authState, setAuthState}> //set which pages or url context api work
                <otherroute>....
                </AuthContext.Provider>
            )

Go back to server folder:
    1.45. in routes/User.js file:
            
            router.post("/login", async (req, res) => {
                const { username, password } = req.body
                const user = await Users.findOne({ where: { username: username } })
                if (!user) res.json({ error: "User Doesn't Exist" })
                bcrypt.compare(password, user.password).then((match) => {
                    if (!match) res.json({ error: "Wrong Username And Password Combination" })
                    const accessToken = sign({ username: user.username, id: user.id }, "importantfulusecret")
                    res.json({ token: accessToken, username: username, id: user.id })
                })
            })

Back to cliend folder:
    2.28. In pages/Login.js file: // how to set context api data
            import React, {useContext} from 'react'
            import {AuthContext} from '../helpers/AuthContext'
            import UserServices from './service/UserServices'
            const Login = () => {
                const {setAuthState} = useContext(AuthContext)
                const submitlogin = async(data) => {
                    const userData = await UserServices.login(data)
                }

                if(login.type = 'success') {
                    setAuthState({
                        id: userData.id,
                        username: userData.username,
                        status: true
                    })
                }
            }
    
    2.29. In pages/Navbar file: //how call context api data
            import React, {useContext} from  'react'
            import {AuthContext} from '../helpers/AuthContext'
            
            const Navbar = () => {
                const {authState} = useContext(AuthContext)

                return (<h1>{authState.username})
            }
    
Back to server folder: 
    1.46. In routes/Comments.js file:
            router.delete("/:commentId", validateToken, async (req, res) => {
                const commentId = req.params.commenId
                Comments.destroy({
                    where: {
                        id: commentId
                    }
                })
            })
    1.47. 















in vscode:::::::::::::::>

            {
    "workbench.iconTheme": "material-icon-theme",
    "prettier.jsxSingleQuote": true,
    "prettier.singleQuote": true,
    "emmet.includeLanguages": {
        "javascript": "javascriptreact"
    },
    "editor.tokenColorCustomizations": {
        "textMateRules": [
            {
                "scope": "comment",
                "settings": {
                    "fontStyle": "italic"
                }
            }
        ]
    },
    "prettier.trailingComma": "all",
    "editor.cursorBlinking": "expand",
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": true,
    "workbench.colorTheme": "Monokai",
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "javascript.updateImportsOnFileMove.enabled": "always",
    "git.autofetch": true,
    "gitlens.advanced.messages": {
        "suppressImproperWorkspaceCasingWarning": true
    },
    "zenMode.hideActivityBar": false
}